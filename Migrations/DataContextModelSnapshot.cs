// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentaCar.Data;

#nullable disable

namespace RentaCar.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentaCar.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContractId"));

                    b.Property<int>("AmountToPay")
                        .HasColumnType("integer");

                    b.Property<int>("ContractUserUserId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PickUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PickUpLocationLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("ReservationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReturnLocationLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("ContractId");

                    b.HasIndex("ContractUserUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PickUpLocationLocationId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ReturnLocationLocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("RentaCar.Models.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LicenceExpMonth")
                        .HasColumnType("integer");

                    b.Property<int>("LicenceExpYear")
                        .HasColumnType("integer");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RentaCar.Models.Locations", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RentaCar.Models.RateTypes", b =>
                {
                    b.Property<int>("RateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RateTypeId"));

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RateTypeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RateTypeId");

                    b.ToTable("RatesTypes");
                });

            modelBuilder.Entity("RentaCar.Models.Rates", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RateId"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("RateAmount")
                        .HasColumnType("integer");

                    b.Property<string>("RateDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RateTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReservationsReservationId")
                        .HasColumnType("integer");

                    b.HasKey("RateId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ReservationsReservationId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("RentaCar.Models.Reservations", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("ExpectedAmountToPay")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpectedPickUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpectedPickUpLocationLocationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpectedReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpectedReturnLocationLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("integer");

                    b.Property<int>("ReservationUserUserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("ReservationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpectedPickUpLocationLocationId");

                    b.HasIndex("ExpectedReturnLocationLocationId");

                    b.HasIndex("ReservationUserUserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RentaCar.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RentaCar.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RentaCar.Models.Vehicles", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AVGMPG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentLocationLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InitialCost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerLocationLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("ParkingSpot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VehicleId");

                    b.HasIndex("CurrentLocationLocationId");

                    b.HasIndex("OwnerLocationLocationId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("RentaCar.Models.Contract", b =>
                {
                    b.HasOne("RentaCar.Models.Users", "ContractUser")
                        .WithMany()
                        .HasForeignKey("ContractUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Locations", "PickUpLocation")
                        .WithMany()
                        .HasForeignKey("PickUpLocationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Reservations", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Locations", "ReturnLocation")
                        .WithMany()
                        .HasForeignKey("ReturnLocationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Vehicles", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractUser");

                    b.Navigation("Customer");

                    b.Navigation("PickUpLocation");

                    b.Navigation("Reservation");

                    b.Navigation("ReturnLocation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RentaCar.Models.Rates", b =>
                {
                    b.HasOne("RentaCar.Models.Contract", null)
                        .WithMany("Rates")
                        .HasForeignKey("ContractId");

                    b.HasOne("RentaCar.Models.Reservations", null)
                        .WithMany("Rates")
                        .HasForeignKey("ReservationsReservationId");
                });

            modelBuilder.Entity("RentaCar.Models.Reservations", b =>
                {
                    b.HasOne("RentaCar.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Locations", "ExpectedPickUpLocation")
                        .WithMany()
                        .HasForeignKey("ExpectedPickUpLocationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Locations", "ExpectedReturnLocation")
                        .WithMany()
                        .HasForeignKey("ExpectedReturnLocationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Users", "ReservationUser")
                        .WithMany()
                        .HasForeignKey("ReservationUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Vehicles", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ExpectedPickUpLocation");

                    b.Navigation("ExpectedReturnLocation");

                    b.Navigation("ReservationUser");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RentaCar.Models.Vehicles", b =>
                {
                    b.HasOne("RentaCar.Models.Locations", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaCar.Models.Locations", "OwnerLocation")
                        .WithMany()
                        .HasForeignKey("OwnerLocationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLocation");

                    b.Navigation("OwnerLocation");
                });

            modelBuilder.Entity("RentaCar.Models.Contract", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("RentaCar.Models.Reservations", b =>
                {
                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
